//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class Game : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game.GameStatusEnum GameStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map MapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerOrder[] PlayerOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[] PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet QuestionSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Round[] RoundsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game.GameStatusEnum GameStatus {
            get {
                return this.GameStatusField;
            }
            set {
                if ((this.GameStatusField.Equals(value) != true)) {
                    this.GameStatusField = value;
                    this.RaisePropertyChanged("GameStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map Map {
            get {
                return this.MapField;
            }
            set {
                if ((object.ReferenceEquals(this.MapField, value) != true)) {
                    this.MapField = value;
                    this.RaisePropertyChanged("Map");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerOrder[] PlayerOrder {
            get {
                return this.PlayerOrderField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerOrderField, value) != true)) {
                    this.PlayerOrderField = value;
                    this.RaisePropertyChanged("PlayerOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet QuestionSet {
            get {
                return this.QuestionSetField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionSetField, value) != true)) {
                    this.QuestionSetField = value;
                    this.RaisePropertyChanged("QuestionSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Round[] Rounds {
            get {
                return this.RoundsField;
            }
            set {
                if ((object.ReferenceEquals(this.RoundsField, value) != true)) {
                    this.RoundsField = value;
                    this.RaisePropertyChanged("Rounds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Game.GameStatusEnum", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
        public enum GameStatusEnum : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            starting = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            ongoing = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            finished = 2,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Map", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class Map : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuestionSet", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class QuestionSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Question[] QuestionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Question[] Questions {
            get {
                return this.QuestionsField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionsField, value) != true)) {
                    this.QuestionsField = value;
                    this.RaisePropertyChanged("Questions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerOrder", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class PlayerOrder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game GameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player PlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game Game {
            get {
                return this.GameField;
            }
            set {
                if ((object.ReferenceEquals(this.GameField, value) != true)) {
                    this.GameField = value;
                    this.RaisePropertyChanged("Game");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player Player {
            get {
                return this.PlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerField, value) != true)) {
                    this.PlayerField = value;
                    this.RaisePropertyChanged("Player");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Round", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class Round : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction[] RoundActionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Round.RoundTypeEnum RoundTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction[] RoundActions {
            get {
                return this.RoundActionsField;
            }
            set {
                if ((object.ReferenceEquals(this.RoundActionsField, value) != true)) {
                    this.RoundActionsField = value;
                    this.RaisePropertyChanged("RoundActions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Round.RoundTypeEnum RoundType {
            get {
                return this.RoundTypeField;
            }
            set {
                if ((this.RoundTypeField.Equals(value) != true)) {
                    this.RoundTypeField = value;
                    this.RaisePropertyChanged("RoundType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Round.RoundTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
        public enum RoundTypeEnum : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            starting = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            expansion = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            conquest = 2,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Question", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class Question : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Answer[] AnswersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Answer[] Answers {
            get {
                return this.AnswersField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswersField, value) != true)) {
                    this.AnswersField = value;
                    this.RaisePropertyChanged("Answers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Answer", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class Answer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RoundAction", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class RoundAction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.AcquiredMapNode[] AcquiredMapNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MapStartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerAnswer[] PlayerAnswersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Question QuestionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime QuestionStartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player RoundActionWinnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.AcquiredMapNode[] AcquiredMapNodes {
            get {
                return this.AcquiredMapNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.AcquiredMapNodesField, value) != true)) {
                    this.AcquiredMapNodesField = value;
                    this.RaisePropertyChanged("AcquiredMapNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MapStartTime {
            get {
                return this.MapStartTimeField;
            }
            set {
                if ((this.MapStartTimeField.Equals(value) != true)) {
                    this.MapStartTimeField = value;
                    this.RaisePropertyChanged("MapStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerAnswer[] PlayerAnswers {
            get {
                return this.PlayerAnswersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerAnswersField, value) != true)) {
                    this.PlayerAnswersField = value;
                    this.RaisePropertyChanged("PlayerAnswers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Question Question {
            get {
                return this.QuestionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionField, value) != true)) {
                    this.QuestionField = value;
                    this.RaisePropertyChanged("Question");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime QuestionStartTime {
            get {
                return this.QuestionStartTimeField;
            }
            set {
                if ((this.QuestionStartTimeField.Equals(value) != true)) {
                    this.QuestionStartTimeField = value;
                    this.RaisePropertyChanged("QuestionStartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player RoundActionWinner {
            get {
                return this.RoundActionWinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.RoundActionWinnerField, value) != true)) {
                    this.RoundActionWinnerField = value;
                    this.RaisePropertyChanged("RoundActionWinner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AcquiredMapNode", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class AcquiredMapNode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.MapNode MapNodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player PlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction RoundActionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.MapNode MapNode {
            get {
                return this.MapNodeField;
            }
            set {
                if ((object.ReferenceEquals(this.MapNodeField, value) != true)) {
                    this.MapNodeField = value;
                    this.RaisePropertyChanged("MapNode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player Player {
            get {
                return this.PlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerField, value) != true)) {
                    this.PlayerField = value;
                    this.RaisePropertyChanged("Player");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction RoundAction {
            get {
                return this.RoundActionField;
            }
            set {
                if ((object.ReferenceEquals(this.RoundActionField, value) != true)) {
                    this.RoundActionField = value;
                    this.RaisePropertyChanged("RoundAction");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerAnswer", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class PlayerAnswer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Answer AnswerGivenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player PlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlayerAnswerTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Answer AnswerGiven {
            get {
                return this.AnswerGivenField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswerGivenField, value) != true)) {
                    this.AnswerGivenField = value;
                    this.RaisePropertyChanged("AnswerGiven");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player Player {
            get {
                return this.PlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerField, value) != true)) {
                    this.PlayerField = value;
                    this.RaisePropertyChanged("Player");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PlayerAnswerTime {
            get {
                return this.PlayerAnswerTimeField;
            }
            set {
                if ((this.PlayerAnswerTimeField.Equals(value) != true)) {
                    this.PlayerAnswerTimeField = value;
                    this.RaisePropertyChanged("PlayerAnswerTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapNode", Namespace="http://schemas.datacontract.org/2004/07/ConquestionGame.Domain")]
    [System.SerializableAttribute()]
    public partial class MapNode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConquestionServiceReference.IConquestionService")]
    public interface IConquestionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CreatePlayer", ReplyAction="http://tempuri.org/IConquestionService/CreatePlayerResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player CreatePlayer(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CreatePlayer", ReplyAction="http://tempuri.org/IConquestionService/CreatePlayerResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player> CreatePlayerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CreateGame", ReplyAction="http://tempuri.org/IConquestionService/CreateGameResponse")]
        void CreateGame(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CreateGame", ReplyAction="http://tempuri.org/IConquestionService/CreateGameResponse")]
        System.Threading.Tasks.Task CreateGameAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/AddPlayer", ReplyAction="http://tempuri.org/IConquestionService/AddPlayerResponse")]
        void AddPlayer(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/AddPlayer", ReplyAction="http://tempuri.org/IConquestionService/AddPlayerResponse")]
        System.Threading.Tasks.Task AddPlayerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ActiveGames", ReplyAction="http://tempuri.org/IConquestionService/ActiveGamesResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game[] ActiveGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ActiveGames", ReplyAction="http://tempuri.org/IConquestionService/ActiveGamesResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game[]> ActiveGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ChooseGame", ReplyAction="http://tempuri.org/IConquestionService/ChooseGameResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game ChooseGame(string name, bool retrieveAssociation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ChooseGame", ReplyAction="http://tempuri.org/IConquestionService/ChooseGameResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game> ChooseGameAsync(string name, bool retrieveAssociation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveAllQuestionSets", ReplyAction="http://tempuri.org/IConquestionService/RetrieveAllQuestionSetsResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet[] RetrieveAllQuestionSets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveAllQuestionSets", ReplyAction="http://tempuri.org/IConquestionService/RetrieveAllQuestionSetsResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet[]> RetrieveAllQuestionSetsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveAllMaps", ReplyAction="http://tempuri.org/IConquestionService/RetrieveAllMapsResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map[] RetrieveAllMaps();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveAllMaps", ReplyAction="http://tempuri.org/IConquestionService/RetrieveAllMapsResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map[]> RetrieveAllMapsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/AskQuestion", ReplyAction="http://tempuri.org/IConquestionService/AskQuestionResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Question AskQuestion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/AskQuestion", ReplyAction="http://tempuri.org/IConquestionService/AskQuestionResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Question> AskQuestionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ValidateAnswer", ReplyAction="http://tempuri.org/IConquestionService/ValidateAnswerResponse")]
        bool ValidateAnswer(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Answer answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ValidateAnswer", ReplyAction="http://tempuri.org/IConquestionService/ValidateAnswerResponse")]
        System.Threading.Tasks.Task<bool> ValidateAnswerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Answer answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CheckPlayerAnswers", ReplyAction="http://tempuri.org/IConquestionService/CheckPlayerAnswersResponse")]
        bool CheckPlayerAnswers(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CheckPlayerAnswers", ReplyAction="http://tempuri.org/IConquestionService/CheckPlayerAnswersResponse")]
        System.Threading.Tasks.Task<bool> CheckPlayerAnswersAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ChooseMap", ReplyAction="http://tempuri.org/IConquestionService/ChooseMapResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map ChooseMap(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ChooseMap", ReplyAction="http://tempuri.org/IConquestionService/ChooseMapResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map> ChooseMapAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveQuestionSet", ReplyAction="http://tempuri.org/IConquestionService/RetrieveQuestionSetResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet RetrieveQuestionSet(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveQuestionSet", ReplyAction="http://tempuri.org/IConquestionService/RetrieveQuestionSetResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet> RetrieveQuestionSetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveQuestionSetByTitle", ReplyAction="http://tempuri.org/IConquestionService/RetrieveQuestionSetByTitleResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet RetrieveQuestionSetByTitle(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveQuestionSetByTitle", ReplyAction="http://tempuri.org/IConquestionService/RetrieveQuestionSetByTitleResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet> RetrieveQuestionSetByTitleAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/AddMap", ReplyAction="http://tempuri.org/IConquestionService/AddMapResponse")]
        void AddMap(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map map);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/AddMap", ReplyAction="http://tempuri.org/IConquestionService/AddMapResponse")]
        System.Threading.Tasks.Task AddMapAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map map);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/AddQuestionSet", ReplyAction="http://tempuri.org/IConquestionService/AddQuestionSetResponse")]
        void AddQuestionSet(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet questionSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/AddQuestionSet", ReplyAction="http://tempuri.org/IConquestionService/AddQuestionSetResponse")]
        System.Threading.Tasks.Task AddQuestionSetAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet questionSet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrievePlayer", ReplyAction="http://tempuri.org/IConquestionService/RetrievePlayerResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player RetrievePlayer(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrievePlayer", ReplyAction="http://tempuri.org/IConquestionService/RetrievePlayerResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player> RetrievePlayerAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/JoinGame", ReplyAction="http://tempuri.org/IConquestionService/JoinGameResponse")]
        bool JoinGame(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/JoinGame", ReplyAction="http://tempuri.org/IConquestionService/JoinGameResponse")]
        System.Threading.Tasks.Task<bool> JoinGameAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/LeaveGame", ReplyAction="http://tempuri.org/IConquestionService/LeaveGameResponse")]
        bool LeaveGame(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/LeaveGame", ReplyAction="http://tempuri.org/IConquestionService/LeaveGameResponse")]
        System.Threading.Tasks.Task<bool> LeaveGameAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CheckIfNodeIsFree", ReplyAction="http://tempuri.org/IConquestionService/CheckIfNodeIsFreeResponse")]
        bool CheckIfNodeIsFree(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, int mapNodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CheckIfNodeIsFree", ReplyAction="http://tempuri.org/IConquestionService/CheckIfNodeIsFreeResponse")]
        System.Threading.Tasks.Task<bool> CheckIfNodeIsFreeAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, int mapNodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveAllPlayersByGameId", ReplyAction="http://tempuri.org/IConquestionService/RetrieveAllPlayersByGameIdResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[] RetrieveAllPlayersByGameId(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/RetrieveAllPlayersByGameId", ReplyAction="http://tempuri.org/IConquestionService/RetrieveAllPlayersByGameIdResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[]> RetrieveAllPlayersByGameIdAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ReturnNodeOwner", ReplyAction="http://tempuri.org/IConquestionService/ReturnNodeOwnerResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player ReturnNodeOwner(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, int mapNodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/ReturnNodeOwner", ReplyAction="http://tempuri.org/IConquestionService/ReturnNodeOwnerResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player> ReturnNodeOwnerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, int mapNodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/StartGame", ReplyAction="http://tempuri.org/IConquestionService/StartGameResponse")]
        bool StartGame(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/StartGame", ReplyAction="http://tempuri.org/IConquestionService/StartGameResponse")]
        System.Threading.Tasks.Task<bool> StartGameAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/SubmitAnswer", ReplyAction="http://tempuri.org/IConquestionService/SubmitAnswerResponse")]
        void SubmitAnswer(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerAnswer playerAnswer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/SubmitAnswer", ReplyAction="http://tempuri.org/IConquestionService/SubmitAnswerResponse")]
        System.Threading.Tasks.Task SubmitAnswerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerAnswer playerAnswer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CheckIfAllPlayersAnswered", ReplyAction="http://tempuri.org/IConquestionService/CheckIfAllPlayersAnsweredResponse")]
        bool CheckIfAllPlayersAnswered(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CheckIfAllPlayersAnswered", ReplyAction="http://tempuri.org/IConquestionService/CheckIfAllPlayersAnsweredResponse")]
        System.Threading.Tasks.Task<bool> CheckIfAllPlayersAnsweredAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/GetPlayerOrder", ReplyAction="http://tempuri.org/IConquestionService/GetPlayerOrderResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[] GetPlayerOrder(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/GetPlayerOrder", ReplyAction="http://tempuri.org/IConquestionService/GetPlayerOrderResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[]> GetPlayerOrderAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/getGamePlayerOrder", ReplyAction="http://tempuri.org/IConquestionService/getGamePlayerOrderResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerOrder[] getGamePlayerOrder(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/getGamePlayerOrder", ReplyAction="http://tempuri.org/IConquestionService/getGamePlayerOrderResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerOrder[]> getGamePlayerOrderAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/SetMapStartTime", ReplyAction="http://tempuri.org/IConquestionService/SetMapStartTimeResponse")]
        void SetMapStartTime(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/SetMapStartTime", ReplyAction="http://tempuri.org/IConquestionService/SetMapStartTimeResponse")]
        System.Threading.Tasks.Task SetMapStartTimeAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CheckPlayerTurn", ReplyAction="http://tempuri.org/IConquestionService/CheckPlayerTurnResponse")]
        ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player CheckPlayerTurn(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/CheckPlayerTurn", ReplyAction="http://tempuri.org/IConquestionService/CheckPlayerTurnResponse")]
        System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player> CheckPlayerTurnAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/SelectMapNode", ReplyAction="http://tempuri.org/IConquestionService/SelectMapNodeResponse")]
        bool SelectMapNode(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player, int MapNodeIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConquestionService/SelectMapNode", ReplyAction="http://tempuri.org/IConquestionService/SelectMapNodeResponse")]
        System.Threading.Tasks.Task<bool> SelectMapNodeAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player, int MapNodeIndex);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConquestionServiceChannel : ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.IConquestionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConquestionServiceClient : System.ServiceModel.ClientBase<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.IConquestionService>, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.IConquestionService {
        
        public ConquestionServiceClient() {
        }
        
        public ConquestionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConquestionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConquestionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConquestionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player CreatePlayer(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            return base.Channel.CreatePlayer(player);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player> CreatePlayerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            return base.Channel.CreatePlayerAsync(player);
        }
        
        public void CreateGame(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game) {
            base.Channel.CreateGame(game);
        }
        
        public System.Threading.Tasks.Task CreateGameAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game) {
            return base.Channel.CreateGameAsync(game);
        }
        
        public void AddPlayer(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            base.Channel.AddPlayer(game, player);
        }
        
        public System.Threading.Tasks.Task AddPlayerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            return base.Channel.AddPlayerAsync(game, player);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game[] ActiveGames() {
            return base.Channel.ActiveGames();
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game[]> ActiveGamesAsync() {
            return base.Channel.ActiveGamesAsync();
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game ChooseGame(string name, bool retrieveAssociation) {
            return base.Channel.ChooseGame(name, retrieveAssociation);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game> ChooseGameAsync(string name, bool retrieveAssociation) {
            return base.Channel.ChooseGameAsync(name, retrieveAssociation);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet[] RetrieveAllQuestionSets() {
            return base.Channel.RetrieveAllQuestionSets();
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet[]> RetrieveAllQuestionSetsAsync() {
            return base.Channel.RetrieveAllQuestionSetsAsync();
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map[] RetrieveAllMaps() {
            return base.Channel.RetrieveAllMaps();
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map[]> RetrieveAllMapsAsync() {
            return base.Channel.RetrieveAllMapsAsync();
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Question AskQuestion() {
            return base.Channel.AskQuestion();
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Question> AskQuestionAsync() {
            return base.Channel.AskQuestionAsync();
        }
        
        public bool ValidateAnswer(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Answer answer) {
            return base.Channel.ValidateAnswer(answer);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateAnswerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Answer answer) {
            return base.Channel.ValidateAnswerAsync(answer);
        }
        
        public bool CheckPlayerAnswers(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction) {
            return base.Channel.CheckPlayerAnswers(game, roundAction);
        }
        
        public System.Threading.Tasks.Task<bool> CheckPlayerAnswersAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction) {
            return base.Channel.CheckPlayerAnswersAsync(game, roundAction);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map ChooseMap(string name) {
            return base.Channel.ChooseMap(name);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map> ChooseMapAsync(string name) {
            return base.Channel.ChooseMapAsync(name);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet RetrieveQuestionSet(int id) {
            return base.Channel.RetrieveQuestionSet(id);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet> RetrieveQuestionSetAsync(int id) {
            return base.Channel.RetrieveQuestionSetAsync(id);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet RetrieveQuestionSetByTitle(string title) {
            return base.Channel.RetrieveQuestionSetByTitle(title);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet> RetrieveQuestionSetByTitleAsync(string title) {
            return base.Channel.RetrieveQuestionSetByTitleAsync(title);
        }
        
        public void AddMap(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map map) {
            base.Channel.AddMap(game, map);
        }
        
        public System.Threading.Tasks.Task AddMapAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Map map) {
            return base.Channel.AddMapAsync(game, map);
        }
        
        public void AddQuestionSet(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet questionSet) {
            base.Channel.AddQuestionSet(game, questionSet);
        }
        
        public System.Threading.Tasks.Task AddQuestionSetAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.QuestionSet questionSet) {
            return base.Channel.AddQuestionSetAsync(game, questionSet);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player RetrievePlayer(string name) {
            return base.Channel.RetrievePlayer(name);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player> RetrievePlayerAsync(string name) {
            return base.Channel.RetrievePlayerAsync(name);
        }
        
        public bool JoinGame(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            return base.Channel.JoinGame(game, player);
        }
        
        public System.Threading.Tasks.Task<bool> JoinGameAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            return base.Channel.JoinGameAsync(game, player);
        }
        
        public bool LeaveGame(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            return base.Channel.LeaveGame(game, player);
        }
        
        public System.Threading.Tasks.Task<bool> LeaveGameAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            return base.Channel.LeaveGameAsync(game, player);
        }
        
        public bool CheckIfNodeIsFree(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, int mapNodeId) {
            return base.Channel.CheckIfNodeIsFree(game, mapNodeId);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfNodeIsFreeAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, int mapNodeId) {
            return base.Channel.CheckIfNodeIsFreeAsync(game, mapNodeId);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[] RetrieveAllPlayersByGameId(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game) {
            return base.Channel.RetrieveAllPlayersByGameId(game);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[]> RetrieveAllPlayersByGameIdAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game) {
            return base.Channel.RetrieveAllPlayersByGameIdAsync(game);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player ReturnNodeOwner(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, int mapNodeId) {
            return base.Channel.ReturnNodeOwner(game, mapNodeId);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player> ReturnNodeOwnerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, int mapNodeId) {
            return base.Channel.ReturnNodeOwnerAsync(game, mapNodeId);
        }
        
        public bool StartGame(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            return base.Channel.StartGame(game, player);
        }
        
        public System.Threading.Tasks.Task<bool> StartGameAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player) {
            return base.Channel.StartGameAsync(game, player);
        }
        
        public void SubmitAnswer(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerAnswer playerAnswer) {
            base.Channel.SubmitAnswer(roundAction, playerAnswer);
        }
        
        public System.Threading.Tasks.Task SubmitAnswerAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerAnswer playerAnswer) {
            return base.Channel.SubmitAnswerAsync(roundAction, playerAnswer);
        }
        
        public bool CheckIfAllPlayersAnswered(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction) {
            return base.Channel.CheckIfAllPlayersAnswered(game, roundAction);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfAllPlayersAnsweredAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction) {
            return base.Channel.CheckIfAllPlayersAnsweredAsync(game, roundAction);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[] GetPlayerOrder(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction) {
            return base.Channel.GetPlayerOrder(game, roundAction);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player[]> GetPlayerOrderAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction) {
            return base.Channel.GetPlayerOrderAsync(game, roundAction);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerOrder[] getGamePlayerOrder(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game) {
            return base.Channel.getGamePlayerOrder(game);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.PlayerOrder[]> getGamePlayerOrderAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game) {
            return base.Channel.getGamePlayerOrderAsync(game);
        }
        
        public void SetMapStartTime(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction) {
            base.Channel.SetMapStartTime(roundAction);
        }
        
        public System.Threading.Tasks.Task SetMapStartTimeAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction) {
            return base.Channel.SetMapStartTimeAsync(roundAction);
        }
        
        public ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player CheckPlayerTurn(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game) {
            return base.Channel.CheckPlayerTurn(roundAction, game);
        }
        
        public System.Threading.Tasks.Task<ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player> CheckPlayerTurnAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game) {
            return base.Channel.CheckPlayerTurnAsync(roundAction, game);
        }
        
        public bool SelectMapNode(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player, int MapNodeIndex) {
            return base.Channel.SelectMapNode(roundAction, game, player, MapNodeIndex);
        }
        
        public System.Threading.Tasks.Task<bool> SelectMapNodeAsync(ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.RoundAction roundAction, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Game game, ConquestionGame.PresentationLayer.SimpleWinForm.ConquestionServiceReference.Player player, int MapNodeIndex) {
            return base.Channel.SelectMapNodeAsync(roundAction, game, player, MapNodeIndex);
        }
    }
}
